[project]
name = "budai"
version = "1.0.0"
description = "BudAI - Self-Deploying Agentic AI System"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "BudAI Team", email = "dev@budai.ai"}
]
keywords = ["ai", "agents", "self-deploying", "prime-directive", "microservices"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: System :: Systems Administration",
]

dependencies = [
    # Web framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    
    # HTTP client
    "httpx>=0.27.0",
    
    # Data validation
    "pydantic>=2.10.0",
    "pydantic-settings>=2.2.1",
    
    # Redis (event bus and session storage)
    "redis[asyncio]>=5.0.1",
    
    # OpenAI SDK (agents and realtime API)
    "openai>=2.2.0",
    
    # Agents SDK dependencies
    "griffe>=1.5.6",
    "typing-extensions>=4.12.2",
    
    # Configuration
    "pyyaml>=6.0.1",
    
    # Slack SDK
    "slack-sdk>=3.26.0",
    
    # WebSockets for Realtime API
    "websockets>=15.0",
]

[project.optional-dependencies]
google = [
    "google-auth>=2.23.0",
    "google-auth-oauthlib>=1.1.0",
    "google-auth-httplib2>=0.1.1",
    "google-api-python-client>=2.100.0",
]

dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.14.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.9.2",
    "mypy>=1.0.0",
    "black>=24.0.0",
]

[project.urls]
Homepage = "https://github.com/yourorg/budai"
Documentation = "https://github.com/yourorg/budai/tree/main/docs"
Repository = "https://github.com/yourorg/budai"
Issues = "https://github.com/yourorg/budai/issues"

[project.scripts]
budai-deploy = "cli.deploy:main"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["installer*", "shared*", "services*", "cli*"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=installer",
    "--cov=shared",
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "installer: Installer contract tests",
]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ANN", # flake8-annotations
]
ignore = [
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "ANN401", # Dynamically typed expressions (Any) are disallowed
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ANN"]
"cli/**/*.py" = ["ANN"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.coverage.run]
source = ["installer", "shared", "services"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

